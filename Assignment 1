{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMJ1Ggs1b62t7NkP+JxxIQh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anilpratap1374/-CNN/blob/main/Assignment%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Dux6eAFuo4QZ"
      },
      "outputs": [],
      "source": [
        "#Q1 Write a Python program that prints \"Hello, World!\" to the console."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello, World!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EDfn0xPRpW96",
        "outputId": "8847f2bf-d63e-4ff1-b9ca-54507624f86d"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q2. Create variables to store your name, age, and favorite hobby. Print these variables."
      ],
      "metadata": {
        "id": "8MVqDajZpfdG"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define variables\n",
        "name = \"Anil Pratap Singh\"\n",
        "age = 22\n",
        "favorite_hobby = \"reading books\"\n",
        "\n",
        "# Print the variables\n",
        "print(\"Name:\", name)\n",
        "print(\"Age:\", age)\n",
        "print(\"Favorite Hobby:\", favorite_hobby)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kqChmcbSpmh8",
        "outputId": "cd57170e-b977-464d-e58d-a38f7fc3d931"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: Anil Pratap Singh\n",
            "Age: 22\n",
            "Favorite Hobby: reading books\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q3 Add comments to your code explaining what each line does."
      ],
      "metadata": {
        "id": "JcFLq8wyp0xu"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the variable 'name' and assign it name as a string\n",
        "name = \"Anil Pratap Singh\"\n",
        "\n",
        "# Define the variable 'age' and assign it age as an integer\n",
        "age = 22\n",
        "\n",
        "# Define the variable 'favorite_hobby' and assign it  favorite hobby as a string\n",
        "favorite_hobby = \"reading books\"\n",
        "\n",
        "# Print the value of the 'name' variable\n",
        "print(\"Name:\", name)\n",
        "\n",
        "# Print the value of the 'age' variable\n",
        "print(\"Age:\", age)\n",
        "\n",
        "# Print the value of the 'favorite_hobby' variable\n",
        "print(\"Favorite Hobby:\", favorite_hobby)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EVl1kQhjp-kt",
        "outputId": "d7505981-0d20-474e-c3fa-90a3331185ca"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: Anil Pratap Singh\n",
            "Age: 22\n",
            "Favorite Hobby: reading books\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q4. Write a Python program that takes an integer input from the user and prints whether the number is positive, negative, or zero."
      ],
      "metadata": {
        "id": "YyUMvLZcqRzl"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Take an integer input from the user\n",
        "number = int(input(\"Enter an integer: \"))\n",
        "\n",
        "# Check if the number is positive, negative, or zero and print the result\n",
        "if number > 0:\n",
        "    print(\"The number is positive.\")\n",
        "elif number < 0:\n",
        "    print(\"The number is negative.\")\n",
        "else:\n",
        "    print(\"The number is zero.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QlNntKaQqb63",
        "outputId": "9cd194f5-d9f7-4607-f0aa-f025d9a1bcf4"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter an integer: 5\n",
            "The number is positive.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q5. Create a program that checks if a given year is a leap year."
      ],
      "metadata": {
        "id": "koe4xqbVqnOM"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Take a year input from the user\n",
        "year = int(input(\"Enter a year: \"))\n",
        "\n",
        "# Check if the year is a leap year\n",
        "if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n",
        "    print(f\"{year} is a leap year.\")\n",
        "else:\n",
        "    print(f\"{year} is not a leap year.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hMvPcIq1q08t",
        "outputId": "86c02738-0ff9-4aba-e3b4-993913c749a0"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a year: 1800\n",
            "1800 is not a leap year.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q6 . Write a Python program to print the first 10 natural numbers using a for loop."
      ],
      "metadata": {
        "id": "o-J01HMCq2Lx"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use a for loop to iterate through numbers 1 to 10\n",
        "for i in range(1, 11):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IMi0vlZorBr7",
        "outputId": "4c539505-0300-4fd0-bec8-5336c7bc235d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q7 Create a program that prints the multiplication table of a given number using a while loop."
      ],
      "metadata": {
        "id": "q5n2MfPBrKAV"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "number = int(input(\"Enter a number: \"))\n",
        "\n",
        "# Initialize a counter variable\n",
        "i = 1\n",
        "\n",
        "# Use a while loop to print the multiplication table\n",
        "while i <= 10:\n",
        "    print(f\"{number} x {i} = {number * i}\")\n",
        "    i += 1  # Increment the counter variable\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ML08uKbcrPjk",
        "outputId": "a1e2341f-9c90-4985-8c44-cabf09a469b9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 3\n",
            "3 x 1 = 3\n",
            "3 x 2 = 6\n",
            "3 x 3 = 9\n",
            "3 x 4 = 12\n",
            "3 x 5 = 15\n",
            "3 x 6 = 18\n",
            "3 x 7 = 21\n",
            "3 x 8 = 24\n",
            "3 x 9 = 27\n",
            "3 x 10 = 30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q8 . Write a Python program that iterates through numbers 1 to 10 and prints each number. Use the continue statement to skip numbers that are divisible by 3."
      ],
      "metadata": {
        "id": "k82OQ5gmrbOr"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use a for loop to iterate through numbers 1 to 10\n",
        "for i in range(1, 11):\n",
        "    # Check if the number is divisible by 3\n",
        "    if i % 3 == 0:\n",
        "        continue  # Skip the rest of the loop for this iteration\n",
        "    # Print the number if it's not divisible by 3\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dAvm5coerqTK",
        "outputId": "f8ed30ca-ac20-4011-a8db-f64ae6546b42"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "4\n",
            "5\n",
            "7\n",
            "8\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q9 Create a program that stops printing numbers when it encounters a number greater than 5 using the break statement."
      ],
      "metadata": {
        "id": "EbZ4BGEzr3Rz"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use a for loop to iterate through numbers 1 to 10\n",
        "for i in range(1, 11):\n",
        "    # Check if the number is greater than 5\n",
        "    if i > 5:\n",
        "        break  # Exit the loop if the number is greater than 5\n",
        "    # Print the number\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hf9krcdYsH5l",
        "outputId": "f9ac4182-d822-4d9a-bf77-45cc7d07d4de"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q10 Define a function called greet that takes a name as an argument and prints \"Hello, [name]!\"."
      ],
      "metadata": {
        "id": "9NUgKlbYsLpz"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(name):\n",
        "    print(f\"Hello, {name}!\")\n",
        "# Example usage of the greet function\n",
        "greet(\"Anil\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RGZlhDXrsShY",
        "outputId": "de2a46e4-279b-42dc-add9-f271ff5d806c"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, Anil!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q11. Create a function that takes two numbers as arguments and returns their sum."
      ],
      "metadata": {
        "id": "KMKmiM0OsoX0"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def add_numbers(num1, num2):\n",
        "    return num1 + num2\n",
        "# Example usage of the add_numbers function\n",
        "result = add_numbers(5, 3)\n",
        "print(\"The sum is:\", result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PYM2rec6swsG",
        "outputId": "1176b635-0263-4c43-c148-0891f42f6def"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The sum is: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2-hylr6ps8Oj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}